//
//  AirportsNearbyViewControllerTests.swift
//  AirportLocator
//
//  Created by Anish Kumar on 08/12/19.
//  Copyright (c) 2019 Anish Kumar. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import AirportLocator
import XCTest
import MapKit

class AirportsNearbyViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: AirportsNearbyViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupAirportsNearbyViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupAirportsNearbyViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = (storyboard.instantiateViewController(withIdentifier: "AirportsNearbyViewController") as! AirportsNearbyViewController)
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class AirportsNearbyBusinessLogicSpy: AirportsNearbyBusinessLogic {
        var showAirportsNearbyCalled = false
        
        func showAirportsNearby(request: AirportsNearby.Request) {
            showAirportsNearbyCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldShowAirportsNearbyWhenViewIsLoaded() {
        // Given
        let spy = AirportsNearbyBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        loadView()
        
        // Then
        XCTAssertTrue(spy.showAirportsNearbyCalled, "viewDidAppear() should ask the interactor to show nearby airports")
    }
    
    func testDisplayAirportAnnotations() {
        // Given
        let location = CLLocationCoordinate2D(latitude: 10.9796, longitude: 76.9674)
        
        let airportId = "356t9yyc-159a942e7ed547b9ac88868886f1d3b9"
        let airportTitle = "Coimbatore International Airport (CJB)"
        let airportLocation = CLLocationCoordinate2D(latitude: 11.03201, longitude: 77.03825)
        let distance = 9683
        let distanceStr = "9.68 km"
        let airport = AirportsNearby.ViewModel.AirportData(id: airportId, title: airportTitle, location: airportLocation, distance: distance, distanceString: distanceStr)
        
        let viewModel = AirportsNearby.ViewModel(findLocation: location)
        viewModel.airports.append(airport)
        
        // When
        loadView()
        sut.displayAirportAnnotations(viewModel: viewModel)

        // Then
        XCTAssertEqual(sut.airportAnnotations.count, 1, "displayAirportAnnotations(viewModel:) should update the map with onne annotation")
        XCTAssertEqual(sut.airportAnnotations[0].coordinate.latitude, airportLocation.latitude, "Annotation location should have latitude \(airportLocation.latitude)")
        XCTAssertEqual(sut.airportAnnotations[0].coordinate.longitude, airportLocation.longitude, "Annotation location should have longitude \(airportLocation.longitude)")
        XCTAssertEqual(sut.airportAnnotations[0].title, airportTitle, "Annotation should have title: \(airportTitle)")
        XCTAssertEqual(sut.airportAnnotations[0].subtitle, distanceStr, "Annotation should have subtitle: \(distanceStr)")
    }
}
