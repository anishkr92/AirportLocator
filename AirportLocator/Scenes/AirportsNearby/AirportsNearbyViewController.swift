//
//  AirportsNearbyViewController.swift
//  AirportLocator
//
//  Created by Anish Kumar on 06/12/19.
//  Copyright (c) 2019 Anish Kumar. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit

protocol AirportsNearbyDisplayLogic: class
{
    func displayAirportAnnotations(viewModel: AirportsNearby.ViewModel)
}

class AirportsNearbyViewController: UIViewController, AirportsNearbyDisplayLogic
{
    var interactor: AirportsNearbyBusinessLogic?
    var router: (NSObjectProtocol & AirportsNearbyRoutingLogic & AirportsNearbyDataPassing)?
    
    // MARK: Outlets
    
    @IBOutlet weak var mapView: MKMapView!
    
    // MARK: Variables
    let locationManager = CLLocationManager()
    var airportAnnotations = [MKAnnotation]()

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = AirportsNearbyInteractor()
        let presenter = AirportsNearbyPresenter()
        let router = AirportsNearbyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        locationManager.requestWhenInUseAuthorization()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.setUpMapView()
        super.viewWillAppear(animated)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        showNeabyAirports()
    }
    
    // MARK: Setup map view
    func setUpMapView() {
        mapView.showsUserLocation = true
    }
    
    // MARK: Do something
    
    func showNeabyAirports() {
        let location = (locationManager.location ?? CLLocation()).coordinate
        let request = AirportsNearby.Request(location: location)
        interactor?.showAirportsNearby(request: request)
    }
    
    func displayAirportAnnotations(viewModel: AirportsNearby.ViewModel) {
        airportAnnotations = [MKAnnotation]()
        for airport in viewModel.airports {
            let annotation = MKPointAnnotation()
            annotation.coordinate = airport.location
            annotation.title = airport.title
            annotation.subtitle = airport.distanceString
            
            airportAnnotations.append(annotation)
        }

        DispatchQueue.main.async {
            self.mapView.addAnnotations(self.airportAnnotations)
            self.mapView.fitAll(annotations: self.airportAnnotations, includeCurrentLocation: true, animated: true)
            self.setUpMapView()
        }
    }
}

extension AirportsNearbyViewController: MKMapViewDelegate {
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        guard annotation is MKPointAnnotation else { return nil }
        
        let reuseIdentifier = "airportAnnotation"
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: reuseIdentifier)
        
        if annotationView == nil {
            annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: reuseIdentifier)
            annotationView?.canShowCallout = true
        } else {
            annotationView?.annotation = annotation
        }
        
        return annotationView
    }
}
